.class final Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;
.super Lcom/evilsunflower/reader/core/xml/ZLXMLReaderAdapter;
.source "ZLTextHyphenationReader.java"


# static fields
.field private static final PATTERN:Ljava/lang/String; = "pattern"


# instance fields
.field private myBuffer:[C

.field private myBufferLength:I

.field private final myHyphenator:Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenator;

.field private myReadPattern:Z


# direct methods
.method constructor <init>(Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenator;)V
    .locals 1
    .param p1, "hyphenator"    # Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenator;

    .prologue
    .line 35
    invoke-direct {p0}, Lcom/evilsunflower/reader/core/xml/ZLXMLReaderAdapter;-><init>()V

    .line 32
    const/16 v0, 0xa

    new-array v0, v0, [C

    iput-object v0, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBuffer:[C

    .line 36
    iput-object p1, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myHyphenator:Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenator;

    .line 37
    return-void
.end method


# virtual methods
.method public characterDataHandler([CII)V
    .locals 4
    .param p1, "ch"    # [C
    .param p2, "start"    # I
    .param p3, "length"    # I

    .prologue
    .line 59
    iget-boolean v3, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myReadPattern:Z

    if-eqz v3, :cond_1

    .line 60
    iget-object v0, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBuffer:[C

    .line 61
    .local v0, "buffer":[C
    iget v2, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBufferLength:I

    .line 62
    .local v2, "oldLen":I
    add-int v1, v2, p3

    .line 63
    .local v1, "newLen":I
    array-length v3, v0

    if-le v1, v3, :cond_0

    .line 64
    add-int/lit8 v3, v1, 0xa

    invoke-static {v0, v2, v3}, Lcom/evilsunflower/reader/core/util/ZLArrayUtils;->createCopy([CII)[C

    move-result-object v0

    .line 65
    iput-object v0, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBuffer:[C

    .line 67
    :cond_0
    invoke-static {p1, p2, v0, v2, p3}, Ljava/lang/System;->arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V

    .line 68
    iput v1, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBufferLength:I

    .line 70
    .end local v0    # "buffer":[C
    .end local v1    # "newLen":I
    .end local v2    # "oldLen":I
    :cond_1
    return-void
.end method

.method public endElementHandler(Ljava/lang/String;)Z
    .locals 6
    .param p1, "tag"    # Ljava/lang/String;

    .prologue
    const/4 v5, 0x0

    .line 47
    const-string v1, "pattern"

    invoke-virtual {v1, p1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 48
    iput-boolean v5, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myReadPattern:Z

    .line 49
    iget v0, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBufferLength:I

    .line 50
    .local v0, "len":I
    if-eqz v0, :cond_0

    .line 51
    iget-object v1, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myHyphenator:Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenator;

    new-instance v2, Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenationPattern;

    iget-object v3, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBuffer:[C

    const/4 v4, 0x1

    invoke-direct {v2, v3, v5, v0, v4}, Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenationPattern;-><init>([CIIZ)V

    invoke-virtual {v1, v2}, Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenator;->addPattern(Lcom/evilsunflower/reader/text/hyphenation/ZLTextTeXHyphenationPattern;)V

    .line 53
    :cond_0
    iput v5, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myBufferLength:I

    .line 55
    .end local v0    # "len":I
    :cond_1
    return v5
.end method

.method public startElementHandler(Ljava/lang/String;Lcom/evilsunflower/reader/core/xml/ZLStringMap;)Z
    .locals 1
    .param p1, "tag"    # Ljava/lang/String;
    .param p2, "attributes"    # Lcom/evilsunflower/reader/core/xml/ZLStringMap;

    .prologue
    .line 40
    const-string v0, "pattern"

    invoke-virtual {v0, p1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_0

    .line 41
    const/4 v0, 0x1

    iput-boolean v0, p0, Lcom/evilsunflower/reader/text/hyphenation/ZLTextHyphenationReader;->myReadPattern:Z

    .line 43
    :cond_0
    const/4 v0, 0x0

    return v0
.end method
